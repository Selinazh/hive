/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hive.service.cli.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-20")
public class TResourceStatus implements org.apache.thrift.TBase<TResourceStatus, TResourceStatus._Fields>, java.io.Serializable, Cloneable, Comparable<TResourceStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceStatus");

  private static final org.apache.thrift.protocol.TField RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USED_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("usedCapacity", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCapacity", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceStatusTupleSchemeFactory());
  }

  private String resourceName; // optional
  private String resourceType; // optional
  private String usedCapacity; // optional
  private String maxCapacity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE_NAME((short)1, "resourceName"),
    RESOURCE_TYPE((short)2, "resourceType"),
    USED_CAPACITY((short)3, "usedCapacity"),
    MAX_CAPACITY((short)4, "maxCapacity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE_NAME
          return RESOURCE_NAME;
        case 2: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 3: // USED_CAPACITY
          return USED_CAPACITY;
        case 4: // MAX_CAPACITY
          return MAX_CAPACITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RESOURCE_NAME,_Fields.RESOURCE_TYPE,_Fields.USED_CAPACITY,_Fields.MAX_CAPACITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("usedCapacity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("maxCapacity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceStatus.class, metaDataMap);
  }

  public TResourceStatus() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceStatus(TResourceStatus other) {
    if (other.isSetResourceName()) {
      this.resourceName = other.resourceName;
    }
    if (other.isSetResourceType()) {
      this.resourceType = other.resourceType;
    }
    if (other.isSetUsedCapacity()) {
      this.usedCapacity = other.usedCapacity;
    }
    if (other.isSetMaxCapacity()) {
      this.maxCapacity = other.maxCapacity;
    }
  }

  public TResourceStatus deepCopy() {
    return new TResourceStatus(this);
  }

  @Override
  public void clear() {
    this.resourceName = null;
    this.resourceType = null;
    this.usedCapacity = null;
    this.maxCapacity = null;
  }

  public String getResourceName() {
    return this.resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }

  public void unsetResourceName() {
    this.resourceName = null;
  }

  /** Returns true if field resourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceName() {
    return this.resourceName != null;
  }

  public void setResourceNameIsSet(boolean value) {
    if (!value) {
      this.resourceName = null;
    }
  }

  public String getResourceType() {
    return this.resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }

  public void unsetResourceType() {
    this.resourceType = null;
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return this.resourceType != null;
  }

  public void setResourceTypeIsSet(boolean value) {
    if (!value) {
      this.resourceType = null;
    }
  }

  public String getUsedCapacity() {
    return this.usedCapacity;
  }

  public void setUsedCapacity(String usedCapacity) {
    this.usedCapacity = usedCapacity;
  }

  public void unsetUsedCapacity() {
    this.usedCapacity = null;
  }

  /** Returns true if field usedCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedCapacity() {
    return this.usedCapacity != null;
  }

  public void setUsedCapacityIsSet(boolean value) {
    if (!value) {
      this.usedCapacity = null;
    }
  }

  public String getMaxCapacity() {
    return this.maxCapacity;
  }

  public void setMaxCapacity(String maxCapacity) {
    this.maxCapacity = maxCapacity;
  }

  public void unsetMaxCapacity() {
    this.maxCapacity = null;
  }

  /** Returns true if field maxCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCapacity() {
    return this.maxCapacity != null;
  }

  public void setMaxCapacityIsSet(boolean value) {
    if (!value) {
      this.maxCapacity = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOURCE_NAME:
      if (value == null) {
        unsetResourceName();
      } else {
        setResourceName((String)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((String)value);
      }
      break;

    case USED_CAPACITY:
      if (value == null) {
        unsetUsedCapacity();
      } else {
        setUsedCapacity((String)value);
      }
      break;

    case MAX_CAPACITY:
      if (value == null) {
        unsetMaxCapacity();
      } else {
        setMaxCapacity((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE_NAME:
      return getResourceName();

    case RESOURCE_TYPE:
      return getResourceType();

    case USED_CAPACITY:
      return getUsedCapacity();

    case MAX_CAPACITY:
      return getMaxCapacity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE_NAME:
      return isSetResourceName();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case USED_CAPACITY:
      return isSetUsedCapacity();
    case MAX_CAPACITY:
      return isSetMaxCapacity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResourceStatus)
      return this.equals((TResourceStatus)that);
    return false;
  }

  public boolean equals(TResourceStatus that) {
    if (that == null)
      return false;

    boolean this_present_resourceName = true && this.isSetResourceName();
    boolean that_present_resourceName = true && that.isSetResourceName();
    if (this_present_resourceName || that_present_resourceName) {
      if (!(this_present_resourceName && that_present_resourceName))
        return false;
      if (!this.resourceName.equals(that.resourceName))
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (!this.resourceType.equals(that.resourceType))
        return false;
    }

    boolean this_present_usedCapacity = true && this.isSetUsedCapacity();
    boolean that_present_usedCapacity = true && that.isSetUsedCapacity();
    if (this_present_usedCapacity || that_present_usedCapacity) {
      if (!(this_present_usedCapacity && that_present_usedCapacity))
        return false;
      if (!this.usedCapacity.equals(that.usedCapacity))
        return false;
    }

    boolean this_present_maxCapacity = true && this.isSetMaxCapacity();
    boolean that_present_maxCapacity = true && that.isSetMaxCapacity();
    if (this_present_maxCapacity || that_present_maxCapacity) {
      if (!(this_present_maxCapacity && that_present_maxCapacity))
        return false;
      if (!this.maxCapacity.equals(that.maxCapacity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resourceName = true && (isSetResourceName());
    list.add(present_resourceName);
    if (present_resourceName)
      list.add(resourceName);

    boolean present_resourceType = true && (isSetResourceType());
    list.add(present_resourceType);
    if (present_resourceType)
      list.add(resourceType);

    boolean present_usedCapacity = true && (isSetUsedCapacity());
    list.add(present_usedCapacity);
    if (present_usedCapacity)
      list.add(usedCapacity);

    boolean present_maxCapacity = true && (isSetMaxCapacity());
    list.add(present_maxCapacity);
    if (present_maxCapacity)
      list.add(maxCapacity);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResourceStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResourceName()).compareTo(other.isSetResourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceName, other.resourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedCapacity()).compareTo(other.isSetUsedCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedCapacity, other.usedCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCapacity()).compareTo(other.isSetMaxCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCapacity, other.maxCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResourceStatus(");
    boolean first = true;

    if (isSetResourceName()) {
      sb.append("resourceName:");
      if (this.resourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceName);
      }
      first = false;
    }
    if (isSetResourceType()) {
      if (!first) sb.append(", ");
      sb.append("resourceType:");
      if (this.resourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceType);
      }
      first = false;
    }
    if (isSetUsedCapacity()) {
      if (!first) sb.append(", ");
      sb.append("usedCapacity:");
      if (this.usedCapacity == null) {
        sb.append("null");
      } else {
        sb.append(this.usedCapacity);
      }
      first = false;
    }
    if (isSetMaxCapacity()) {
      if (!first) sb.append(", ");
      sb.append("maxCapacity:");
      if (this.maxCapacity == null) {
        sb.append("null");
      } else {
        sb.append(this.maxCapacity);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceStatusStandardSchemeFactory implements SchemeFactory {
    public TResourceStatusStandardScheme getScheme() {
      return new TResourceStatusStandardScheme();
    }
  }

  private static class TResourceStatusStandardScheme extends StandardScheme<TResourceStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceName = iprot.readString();
              struct.setResourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceType = iprot.readString();
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USED_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usedCapacity = iprot.readString();
              struct.setUsedCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxCapacity = iprot.readString();
              struct.setMaxCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resourceName != null) {
        if (struct.isSetResourceName()) {
          oprot.writeFieldBegin(RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.resourceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceType != null) {
        if (struct.isSetResourceType()) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.resourceType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.usedCapacity != null) {
        if (struct.isSetUsedCapacity()) {
          oprot.writeFieldBegin(USED_CAPACITY_FIELD_DESC);
          oprot.writeString(struct.usedCapacity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.maxCapacity != null) {
        if (struct.isSetMaxCapacity()) {
          oprot.writeFieldBegin(MAX_CAPACITY_FIELD_DESC);
          oprot.writeString(struct.maxCapacity);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceStatusTupleSchemeFactory implements SchemeFactory {
    public TResourceStatusTupleScheme getScheme() {
      return new TResourceStatusTupleScheme();
    }
  }

  private static class TResourceStatusTupleScheme extends TupleScheme<TResourceStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResourceName()) {
        optionals.set(0);
      }
      if (struct.isSetResourceType()) {
        optionals.set(1);
      }
      if (struct.isSetUsedCapacity()) {
        optionals.set(2);
      }
      if (struct.isSetMaxCapacity()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetResourceName()) {
        oprot.writeString(struct.resourceName);
      }
      if (struct.isSetResourceType()) {
        oprot.writeString(struct.resourceType);
      }
      if (struct.isSetUsedCapacity()) {
        oprot.writeString(struct.usedCapacity);
      }
      if (struct.isSetMaxCapacity()) {
        oprot.writeString(struct.maxCapacity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.resourceName = iprot.readString();
        struct.setResourceNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceType = iprot.readString();
        struct.setResourceTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.usedCapacity = iprot.readString();
        struct.setUsedCapacityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxCapacity = iprot.readString();
        struct.setMaxCapacityIsSet(true);
      }
    }
  }

}

