/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hive.service.cli.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-20")
public class TOperationStatus implements org.apache.thrift.TBase<TOperationStatus, TOperationStatus._Fields>, java.io.Serializable, Cloneable, Comparable<TOperationStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOperationStatus");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATION_HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operationHandleID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TEZ_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tezSessionID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("operationStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OPERATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("trackingURL", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOperationStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOperationStatusTupleSchemeFactory());
  }

  private String user; // optional
  private String host; // optional
  private String sessionID; // optional
  private String operationHandleID; // optional
  private String tezSessionID; // optional
  private TOperationState operationStatus; // optional
  private TOperationType operationType; // optional
  private String query; // optional
  private String trackingURL; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    HOST((short)2, "host"),
    SESSION_ID((short)3, "sessionID"),
    OPERATION_HANDLE_ID((short)4, "operationHandleID"),
    TEZ_SESSION_ID((short)5, "tezSessionID"),
    /**
     * 
     * @see TOperationState
     */
    OPERATION_STATUS((short)6, "operationStatus"),
    /**
     * 
     * @see TOperationType
     */
    OPERATION_TYPE((short)7, "operationType"),
    QUERY((short)8, "query"),
    TRACKING_URL((short)9, "trackingURL");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // HOST
          return HOST;
        case 3: // SESSION_ID
          return SESSION_ID;
        case 4: // OPERATION_HANDLE_ID
          return OPERATION_HANDLE_ID;
        case 5: // TEZ_SESSION_ID
          return TEZ_SESSION_ID;
        case 6: // OPERATION_STATUS
          return OPERATION_STATUS;
        case 7: // OPERATION_TYPE
          return OPERATION_TYPE;
        case 8: // QUERY
          return QUERY;
        case 9: // TRACKING_URL
          return TRACKING_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER,_Fields.HOST,_Fields.SESSION_ID,_Fields.OPERATION_HANDLE_ID,_Fields.TEZ_SESSION_ID,_Fields.OPERATION_STATUS,_Fields.OPERATION_TYPE,_Fields.QUERY,_Fields.TRACKING_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION_HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("operationHandleID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEZ_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("tezSessionID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("operationStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TOperationState.class)));
    tmpMap.put(_Fields.OPERATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TOperationType.class)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("trackingURL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOperationStatus.class, metaDataMap);
  }

  public TOperationStatus() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOperationStatus(TOperationStatus other) {
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetSessionID()) {
      this.sessionID = other.sessionID;
    }
    if (other.isSetOperationHandleID()) {
      this.operationHandleID = other.operationHandleID;
    }
    if (other.isSetTezSessionID()) {
      this.tezSessionID = other.tezSessionID;
    }
    if (other.isSetOperationStatus()) {
      this.operationStatus = other.operationStatus;
    }
    if (other.isSetOperationType()) {
      this.operationType = other.operationType;
    }
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetTrackingURL()) {
      this.trackingURL = other.trackingURL;
    }
  }

  public TOperationStatus deepCopy() {
    return new TOperationStatus(this);
  }

  @Override
  public void clear() {
    this.user = null;
    this.host = null;
    this.sessionID = null;
    this.operationHandleID = null;
    this.tezSessionID = null;
    this.operationStatus = null;
    this.operationType = null;
    this.query = null;
    this.trackingURL = null;
  }

  public String getUser() {
    return this.user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getHost() {
    return this.host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public String getSessionID() {
    return this.sessionID;
  }

  public void setSessionID(String sessionID) {
    this.sessionID = sessionID;
  }

  public void unsetSessionID() {
    this.sessionID = null;
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return this.sessionID != null;
  }

  public void setSessionIDIsSet(boolean value) {
    if (!value) {
      this.sessionID = null;
    }
  }

  public String getOperationHandleID() {
    return this.operationHandleID;
  }

  public void setOperationHandleID(String operationHandleID) {
    this.operationHandleID = operationHandleID;
  }

  public void unsetOperationHandleID() {
    this.operationHandleID = null;
  }

  /** Returns true if field operationHandleID is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationHandleID() {
    return this.operationHandleID != null;
  }

  public void setOperationHandleIDIsSet(boolean value) {
    if (!value) {
      this.operationHandleID = null;
    }
  }

  public String getTezSessionID() {
    return this.tezSessionID;
  }

  public void setTezSessionID(String tezSessionID) {
    this.tezSessionID = tezSessionID;
  }

  public void unsetTezSessionID() {
    this.tezSessionID = null;
  }

  /** Returns true if field tezSessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetTezSessionID() {
    return this.tezSessionID != null;
  }

  public void setTezSessionIDIsSet(boolean value) {
    if (!value) {
      this.tezSessionID = null;
    }
  }

  /**
   * 
   * @see TOperationState
   */
  public TOperationState getOperationStatus() {
    return this.operationStatus;
  }

  /**
   * 
   * @see TOperationState
   */
  public void setOperationStatus(TOperationState operationStatus) {
    this.operationStatus = operationStatus;
  }

  public void unsetOperationStatus() {
    this.operationStatus = null;
  }

  /** Returns true if field operationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationStatus() {
    return this.operationStatus != null;
  }

  public void setOperationStatusIsSet(boolean value) {
    if (!value) {
      this.operationStatus = null;
    }
  }

  /**
   * 
   * @see TOperationType
   */
  public TOperationType getOperationType() {
    return this.operationType;
  }

  /**
   * 
   * @see TOperationType
   */
  public void setOperationType(TOperationType operationType) {
    this.operationType = operationType;
  }

  public void unsetOperationType() {
    this.operationType = null;
  }

  /** Returns true if field operationType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationType() {
    return this.operationType != null;
  }

  public void setOperationTypeIsSet(boolean value) {
    if (!value) {
      this.operationType = null;
    }
  }

  public String getQuery() {
    return this.query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getTrackingURL() {
    return this.trackingURL;
  }

  public void setTrackingURL(String trackingURL) {
    this.trackingURL = trackingURL;
  }

  public void unsetTrackingURL() {
    this.trackingURL = null;
  }

  /** Returns true if field trackingURL is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingURL() {
    return this.trackingURL != null;
  }

  public void setTrackingURLIsSet(boolean value) {
    if (!value) {
      this.trackingURL = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((String)value);
      }
      break;

    case OPERATION_HANDLE_ID:
      if (value == null) {
        unsetOperationHandleID();
      } else {
        setOperationHandleID((String)value);
      }
      break;

    case TEZ_SESSION_ID:
      if (value == null) {
        unsetTezSessionID();
      } else {
        setTezSessionID((String)value);
      }
      break;

    case OPERATION_STATUS:
      if (value == null) {
        unsetOperationStatus();
      } else {
        setOperationStatus((TOperationState)value);
      }
      break;

    case OPERATION_TYPE:
      if (value == null) {
        unsetOperationType();
      } else {
        setOperationType((TOperationType)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTrackingURL();
      } else {
        setTrackingURL((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return getUser();

    case HOST:
      return getHost();

    case SESSION_ID:
      return getSessionID();

    case OPERATION_HANDLE_ID:
      return getOperationHandleID();

    case TEZ_SESSION_ID:
      return getTezSessionID();

    case OPERATION_STATUS:
      return getOperationStatus();

    case OPERATION_TYPE:
      return getOperationType();

    case QUERY:
      return getQuery();

    case TRACKING_URL:
      return getTrackingURL();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case HOST:
      return isSetHost();
    case SESSION_ID:
      return isSetSessionID();
    case OPERATION_HANDLE_ID:
      return isSetOperationHandleID();
    case TEZ_SESSION_ID:
      return isSetTezSessionID();
    case OPERATION_STATUS:
      return isSetOperationStatus();
    case OPERATION_TYPE:
      return isSetOperationType();
    case QUERY:
      return isSetQuery();
    case TRACKING_URL:
      return isSetTrackingURL();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOperationStatus)
      return this.equals((TOperationStatus)that);
    return false;
  }

  public boolean equals(TOperationStatus that) {
    if (that == null)
      return false;

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_sessionID = true && this.isSetSessionID();
    boolean that_present_sessionID = true && that.isSetSessionID();
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (!this.sessionID.equals(that.sessionID))
        return false;
    }

    boolean this_present_operationHandleID = true && this.isSetOperationHandleID();
    boolean that_present_operationHandleID = true && that.isSetOperationHandleID();
    if (this_present_operationHandleID || that_present_operationHandleID) {
      if (!(this_present_operationHandleID && that_present_operationHandleID))
        return false;
      if (!this.operationHandleID.equals(that.operationHandleID))
        return false;
    }

    boolean this_present_tezSessionID = true && this.isSetTezSessionID();
    boolean that_present_tezSessionID = true && that.isSetTezSessionID();
    if (this_present_tezSessionID || that_present_tezSessionID) {
      if (!(this_present_tezSessionID && that_present_tezSessionID))
        return false;
      if (!this.tezSessionID.equals(that.tezSessionID))
        return false;
    }

    boolean this_present_operationStatus = true && this.isSetOperationStatus();
    boolean that_present_operationStatus = true && that.isSetOperationStatus();
    if (this_present_operationStatus || that_present_operationStatus) {
      if (!(this_present_operationStatus && that_present_operationStatus))
        return false;
      if (!this.operationStatus.equals(that.operationStatus))
        return false;
    }

    boolean this_present_operationType = true && this.isSetOperationType();
    boolean that_present_operationType = true && that.isSetOperationType();
    if (this_present_operationType || that_present_operationType) {
      if (!(this_present_operationType && that_present_operationType))
        return false;
      if (!this.operationType.equals(that.operationType))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_trackingURL = true && this.isSetTrackingURL();
    boolean that_present_trackingURL = true && that.isSetTrackingURL();
    if (this_present_trackingURL || that_present_trackingURL) {
      if (!(this_present_trackingURL && that_present_trackingURL))
        return false;
      if (!this.trackingURL.equals(that.trackingURL))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_host = true && (isSetHost());
    list.add(present_host);
    if (present_host)
      list.add(host);

    boolean present_sessionID = true && (isSetSessionID());
    list.add(present_sessionID);
    if (present_sessionID)
      list.add(sessionID);

    boolean present_operationHandleID = true && (isSetOperationHandleID());
    list.add(present_operationHandleID);
    if (present_operationHandleID)
      list.add(operationHandleID);

    boolean present_tezSessionID = true && (isSetTezSessionID());
    list.add(present_tezSessionID);
    if (present_tezSessionID)
      list.add(tezSessionID);

    boolean present_operationStatus = true && (isSetOperationStatus());
    list.add(present_operationStatus);
    if (present_operationStatus)
      list.add(operationStatus.getValue());

    boolean present_operationType = true && (isSetOperationType());
    list.add(present_operationType);
    if (present_operationType)
      list.add(operationType.getValue());

    boolean present_query = true && (isSetQuery());
    list.add(present_query);
    if (present_query)
      list.add(query);

    boolean present_trackingURL = true && (isSetTrackingURL());
    list.add(present_trackingURL);
    if (present_trackingURL)
      list.add(trackingURL);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOperationStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationHandleID()).compareTo(other.isSetOperationHandleID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationHandleID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationHandleID, other.operationHandleID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTezSessionID()).compareTo(other.isSetTezSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTezSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tezSessionID, other.tezSessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationStatus()).compareTo(other.isSetOperationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationStatus, other.operationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationType()).compareTo(other.isSetOperationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationType, other.operationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackingURL()).compareTo(other.isSetTrackingURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackingURL, other.trackingURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOperationStatus(");
    boolean first = true;

    if (isSetUser()) {
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetHost()) {
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
    }
    if (isSetSessionID()) {
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
    }
    if (isSetOperationHandleID()) {
      if (!first) sb.append(", ");
      sb.append("operationHandleID:");
      if (this.operationHandleID == null) {
        sb.append("null");
      } else {
        sb.append(this.operationHandleID);
      }
      first = false;
    }
    if (isSetTezSessionID()) {
      if (!first) sb.append(", ");
      sb.append("tezSessionID:");
      if (this.tezSessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.tezSessionID);
      }
      first = false;
    }
    if (isSetOperationStatus()) {
      if (!first) sb.append(", ");
      sb.append("operationStatus:");
      if (this.operationStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.operationStatus);
      }
      first = false;
    }
    if (isSetOperationType()) {
      if (!first) sb.append(", ");
      sb.append("operationType:");
      if (this.operationType == null) {
        sb.append("null");
      } else {
        sb.append(this.operationType);
      }
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetTrackingURL()) {
      if (!first) sb.append(", ");
      sb.append("trackingURL:");
      if (this.trackingURL == null) {
        sb.append("null");
      } else {
        sb.append(this.trackingURL);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOperationStatusStandardSchemeFactory implements SchemeFactory {
    public TOperationStatusStandardScheme getScheme() {
      return new TOperationStatusStandardScheme();
    }
  }

  private static class TOperationStatusStandardScheme extends StandardScheme<TOperationStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOperationStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionID = iprot.readString();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATION_HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operationHandleID = iprot.readString();
              struct.setOperationHandleIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEZ_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tezSessionID = iprot.readString();
              struct.setTezSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationStatus = org.apache.hive.service.cli.thrift.TOperationState.findByValue(iprot.readI32());
              struct.setOperationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPERATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationType = org.apache.hive.service.cli.thrift.TOperationType.findByValue(iprot.readI32());
              struct.setOperationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trackingURL = iprot.readString();
              struct.setTrackingURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOperationStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.host != null) {
        if (struct.isSetHost()) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionID != null) {
        if (struct.isSetSessionID()) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operationHandleID != null) {
        if (struct.isSetOperationHandleID()) {
          oprot.writeFieldBegin(OPERATION_HANDLE_ID_FIELD_DESC);
          oprot.writeString(struct.operationHandleID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tezSessionID != null) {
        if (struct.isSetTezSessionID()) {
          oprot.writeFieldBegin(TEZ_SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.tezSessionID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operationStatus != null) {
        if (struct.isSetOperationStatus()) {
          oprot.writeFieldBegin(OPERATION_STATUS_FIELD_DESC);
          oprot.writeI32(struct.operationStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.operationType != null) {
        if (struct.isSetOperationType()) {
          oprot.writeFieldBegin(OPERATION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.operationType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.trackingURL != null) {
        if (struct.isSetTrackingURL()) {
          oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
          oprot.writeString(struct.trackingURL);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOperationStatusTupleSchemeFactory implements SchemeFactory {
    public TOperationStatusTupleScheme getScheme() {
      return new TOperationStatusTupleScheme();
    }
  }

  private static class TOperationStatusTupleScheme extends TupleScheme<TOperationStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOperationStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser()) {
        optionals.set(0);
      }
      if (struct.isSetHost()) {
        optionals.set(1);
      }
      if (struct.isSetSessionID()) {
        optionals.set(2);
      }
      if (struct.isSetOperationHandleID()) {
        optionals.set(3);
      }
      if (struct.isSetTezSessionID()) {
        optionals.set(4);
      }
      if (struct.isSetOperationStatus()) {
        optionals.set(5);
      }
      if (struct.isSetOperationType()) {
        optionals.set(6);
      }
      if (struct.isSetQuery()) {
        optionals.set(7);
      }
      if (struct.isSetTrackingURL()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetSessionID()) {
        oprot.writeString(struct.sessionID);
      }
      if (struct.isSetOperationHandleID()) {
        oprot.writeString(struct.operationHandleID);
      }
      if (struct.isSetTezSessionID()) {
        oprot.writeString(struct.tezSessionID);
      }
      if (struct.isSetOperationStatus()) {
        oprot.writeI32(struct.operationStatus.getValue());
      }
      if (struct.isSetOperationType()) {
        oprot.writeI32(struct.operationType.getValue());
      }
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetTrackingURL()) {
        oprot.writeString(struct.trackingURL);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOperationStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sessionID = iprot.readString();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operationHandleID = iprot.readString();
        struct.setOperationHandleIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tezSessionID = iprot.readString();
        struct.setTezSessionIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operationStatus = org.apache.hive.service.cli.thrift.TOperationState.findByValue(iprot.readI32());
        struct.setOperationStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.operationType = org.apache.hive.service.cli.thrift.TOperationType.findByValue(iprot.readI32());
        struct.setOperationTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.trackingURL = iprot.readString();
        struct.setTrackingURLIsSet(true);
      }
    }
  }

}

